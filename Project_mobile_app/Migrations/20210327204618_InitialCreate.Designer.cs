// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project_mobile_app.Data;

namespace Project_mobile_app.Migrations
{
    [DbContext(typeof(Project_mobile_appContext))]
    [Migration("20210327204618_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.4")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ChoiceMapPosition", b =>
                {
                    b.Property<int>("ChoicesThatOpenThisId")
                        .HasColumnType("int");

                    b.Property<int>("OpensMapPositionsId")
                        .HasColumnType("int");

                    b.HasKey("ChoicesThatOpenThisId", "OpensMapPositionsId");

                    b.HasIndex("OpensMapPositionsId");

                    b.ToTable("ChoiceMapPosition");
                });

            modelBuilder.Entity("ChoiceQuestion", b =>
                {
                    b.Property<int>("ChoicesThatOpensThisId")
                        .HasColumnType("int");

                    b.Property<int>("OpensQuestionsId")
                        .HasColumnType("int");

                    b.HasKey("ChoicesThatOpensThisId", "OpensQuestionsId");

                    b.HasIndex("OpensQuestionsId");

                    b.ToTable("ChoiceQuestion");
                });

            modelBuilder.Entity("ChoiceStop", b =>
                {
                    b.Property<int>("ChoicesThatOpenThisId")
                        .HasColumnType("int");

                    b.Property<int>("OpensStopsId")
                        .HasColumnType("int");

                    b.HasKey("ChoicesThatOpenThisId", "OpensStopsId");

                    b.HasIndex("OpensStopsId");

                    b.ToTable("ChoiceStop");
                });

            modelBuilder.Entity("GameUser", b =>
                {
                    b.Property<int>("GamesId")
                        .HasColumnType("int");

                    b.Property<int>("OwnersId")
                        .HasColumnType("int");

                    b.HasKey("GamesId", "OwnersId");

                    b.HasIndex("OwnersId");

                    b.ToTable("GameUser");
                });

            modelBuilder.Entity("Project_mobile_app.Models.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("Project_mobile_app.Models.Choice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Choice");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Choice");
                });

            modelBuilder.Entity("Project_mobile_app.Models.DisplayObject", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IntroductionId")
                        .HasColumnType("int");

                    b.Property<short?>("PositionInIntroduction")
                        .HasColumnType("smallint");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("IntroductionId");

                    b.ToTable("DisplayObjects");

                    b.HasDiscriminator<string>("Discriminator").HasValue("DisplayObject");
                });

            modelBuilder.Entity("Project_mobile_app.Models.DisplayObjectStopDisplayAfterDisplay", b =>
                {
                    b.Property<int>("StopId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayObjectId")
                        .HasColumnType("int");

                    b.Property<short?>("Position")
                        .HasColumnType("smallint");

                    b.HasKey("StopId", "DisplayObjectId");

                    b.HasIndex("DisplayObjectId");

                    b.ToTable("DisplayObjectStopDisplayAfterDisplay");
                });

            modelBuilder.Entity("Project_mobile_app.Models.DisplayObjectStopDisplayAfterUnlock", b =>
                {
                    b.Property<int>("StopId")
                        .HasColumnType("int");

                    b.Property<int>("DisplayObjectId")
                        .HasColumnType("int");

                    b.Property<short?>("Position")
                        .HasColumnType("smallint");

                    b.HasKey("StopId", "DisplayObjectId");

                    b.HasIndex("DisplayObjectId");

                    b.ToTable("DisplayObjectStopDisplayAfterUnlock");
                });

            modelBuilder.Entity("Project_mobile_app.Models.Game", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Limit")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("PlayingTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Game");
                });

            modelBuilder.Entity("Project_mobile_app.Models.GamePassword", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("DiffUpperCase")
                        .HasColumnType("bit");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PasswordGameRequirementId")
                        .HasColumnType("int");

                    b.Property<bool>("UseRegex")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("PasswordGameRequirementId");

                    b.ToTable("GamePassword");
                });

            modelBuilder.Entity("Project_mobile_app.Models.Introduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("GameId")
                        .IsUnique();

                    b.ToTable("Introduction");
                });

            modelBuilder.Entity("Project_mobile_app.Models.MapPosition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("IntroductionId")
                        .HasColumnType("int");

                    b.Property<int?>("PositionOfStopId")
                        .HasColumnType("int");

                    b.Property<double>("Radius")
                        .HasColumnType("float");

                    b.Property<int?>("StopDisplayAfterDisplayId")
                        .HasColumnType("int");

                    b.Property<int?>("StopDisplayAfterUnlockId")
                        .HasColumnType("int");

                    b.Property<double>("X")
                        .HasColumnType("float");

                    b.Property<double>("Y")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("IntroductionId");

                    b.HasIndex("PositionOfStopId")
                        .IsUnique()
                        .HasFilter("[PositionOfStopId] IS NOT NULL");

                    b.HasIndex("StopDisplayAfterDisplayId");

                    b.HasIndex("StopDisplayAfterUnlockId");

                    b.ToTable("MapPositions");
                });

            modelBuilder.Entity("Project_mobile_app.Models.PasswordGameRequirement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Question")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("StopId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StopId");

                    b.ToTable("PasswordGameRequirement");
                });

            modelBuilder.Entity("Project_mobile_app.Models.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QuestionText")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Question");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Question");
                });

            modelBuilder.Entity("Project_mobile_app.Models.Statistics", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<short>("NumberOfGamesPlayed")
                        .HasColumnType("smallint");

                    b.Property<short>("SuccesfullGames")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("TimeInGames")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.ToTable("Statistics");
                });

            modelBuilder.Entity("Project_mobile_app.Models.Stop", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("GameFirstStopId")
                        .HasColumnType("int");

                    b.Property<bool>("IsFinal")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("PartOfGameId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GameFirstStopId")
                        .IsUnique();

                    b.HasIndex("PartOfGameId");

                    b.ToTable("Stop");
                });

            modelBuilder.Entity("Project_mobile_app.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("QuestionStop", b =>
                {
                    b.Property<int>("QuestionsId")
                        .HasColumnType("int");

                    b.Property<int>("StopsThatOpenThisId")
                        .HasColumnType("int");

                    b.HasKey("QuestionsId", "StopsThatOpenThisId");

                    b.HasIndex("StopsThatOpenThisId");

                    b.ToTable("QuestionStop");
                });

            modelBuilder.Entity("StopStop", b =>
                {
                    b.Property<int>("OpensId")
                        .HasColumnType("int");

                    b.Property<int>("StopsThatOpenThisId")
                        .HasColumnType("int");

                    b.HasKey("OpensId", "StopsThatOpenThisId");

                    b.HasIndex("StopsThatOpenThisId");

                    b.ToTable("StopStop");
                });

            modelBuilder.Entity("Project_mobile_app.Models.ChoiceForChoiceQuestion", b =>
                {
                    b.HasBaseType("Project_mobile_app.Models.Choice");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)");

                    b.HasIndex("QuestionId");

                    b.HasDiscriminator().HasValue("ChoiceForChoiceQuestion");
                });

            modelBuilder.Entity("Project_mobile_app.Models.ChoiceForTextQuestion", b =>
                {
                    b.HasBaseType("Project_mobile_app.Models.Choice");

                    b.Property<bool>("DiffUpperCase")
                        .HasColumnType("bit");

                    b.Property<int?>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("ChoiceForTextQuestion_QuestionId");

                    b.Property<string>("Text")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("ChoiceForTextQuestion_Text");

                    b.Property<bool>("UseRegex")
                        .HasColumnType("bit");

                    b.HasIndex("QuestionId");

                    b.HasDiscriminator().HasValue("ChoiceForTextQuestion");
                });

            modelBuilder.Entity("Project_mobile_app.Models.DefaultChoice", b =>
                {
                    b.HasBaseType("Project_mobile_app.Models.Choice");

                    b.Property<int>("QuestionId")
                        .HasColumnType("int")
                        .HasColumnName("DefaultChoice_QuestionId");

                    b.HasIndex("QuestionId")
                        .IsUnique()
                        .HasFilter("[DefaultChoice_QuestionId] IS NOT NULL");

                    b.HasDiscriminator().HasValue("DefaultChoice");
                });

            modelBuilder.Entity("Project_mobile_app.Models.Picture", b =>
                {
                    b.HasBaseType("Project_mobile_app.Models.DisplayObject");

                    b.Property<byte[]>("Image")
                        .HasColumnType("varbinary(max)");

                    b.HasDiscriminator().HasValue("Picture");
                });

            modelBuilder.Entity("Project_mobile_app.Models.Text", b =>
                {
                    b.HasBaseType("Project_mobile_app.Models.DisplayObject");

                    b.Property<string>("OwnText")
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("Text");
                });

            modelBuilder.Entity("Project_mobile_app.Models.ChoiceQuestion", b =>
                {
                    b.HasBaseType("Project_mobile_app.Models.Question");

                    b.HasDiscriminator().HasValue("ChoiceQuestion");
                });

            modelBuilder.Entity("Project_mobile_app.Models.TextQuestion", b =>
                {
                    b.HasBaseType("Project_mobile_app.Models.Question");

                    b.HasDiscriminator().HasValue("TextQuestion");
                });

            modelBuilder.Entity("ChoiceMapPosition", b =>
                {
                    b.HasOne("Project_mobile_app.Models.Choice", null)
                        .WithMany()
                        .HasForeignKey("ChoicesThatOpenThisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_mobile_app.Models.MapPosition", null)
                        .WithMany()
                        .HasForeignKey("OpensMapPositionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChoiceQuestion", b =>
                {
                    b.HasOne("Project_mobile_app.Models.Choice", null)
                        .WithMany()
                        .HasForeignKey("ChoicesThatOpensThisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_mobile_app.Models.Question", null)
                        .WithMany()
                        .HasForeignKey("OpensQuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ChoiceStop", b =>
                {
                    b.HasOne("Project_mobile_app.Models.Choice", null)
                        .WithMany()
                        .HasForeignKey("ChoicesThatOpenThisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_mobile_app.Models.Stop", null)
                        .WithMany()
                        .HasForeignKey("OpensStopsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("GameUser", b =>
                {
                    b.HasOne("Project_mobile_app.Models.Game", null)
                        .WithMany()
                        .HasForeignKey("GamesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_mobile_app.Models.User", null)
                        .WithMany()
                        .HasForeignKey("OwnersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project_mobile_app.Models.DisplayObject", b =>
                {
                    b.HasOne("Project_mobile_app.Models.Introduction", "Introduction")
                        .WithMany("DisplayObjects")
                        .HasForeignKey("IntroductionId");

                    b.Navigation("Introduction");
                });

            modelBuilder.Entity("Project_mobile_app.Models.DisplayObjectStopDisplayAfterDisplay", b =>
                {
                    b.HasOne("Project_mobile_app.Models.DisplayObject", "DisplayObject")
                        .WithMany("HintForTheseStops")
                        .HasForeignKey("DisplayObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_mobile_app.Models.Stop", "Stop")
                        .WithMany("DisplayObjectsHints")
                        .HasForeignKey("StopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DisplayObject");

                    b.Navigation("Stop");
                });

            modelBuilder.Entity("Project_mobile_app.Models.DisplayObjectStopDisplayAfterUnlock", b =>
                {
                    b.HasOne("Project_mobile_app.Models.DisplayObject", "DisplayObject")
                        .WithMany("RewardForTheseStops")
                        .HasForeignKey("DisplayObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_mobile_app.Models.Stop", "Stop")
                        .WithMany("DisplayObjectsRewards")
                        .HasForeignKey("StopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DisplayObject");

                    b.Navigation("Stop");
                });

            modelBuilder.Entity("Project_mobile_app.Models.GamePassword", b =>
                {
                    b.HasOne("Project_mobile_app.Models.PasswordGameRequirement", "PasswordGameRequirement")
                        .WithMany("Passwords")
                        .HasForeignKey("PasswordGameRequirementId");

                    b.Navigation("PasswordGameRequirement");
                });

            modelBuilder.Entity("Project_mobile_app.Models.Introduction", b =>
                {
                    b.HasOne("Project_mobile_app.Models.Game", "Game")
                        .WithOne("Introduction")
                        .HasForeignKey("Project_mobile_app.Models.Introduction", "GameId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Game");
                });

            modelBuilder.Entity("Project_mobile_app.Models.MapPosition", b =>
                {
                    b.HasOne("Project_mobile_app.Models.Introduction", "Introduction")
                        .WithMany("MapPositions")
                        .HasForeignKey("IntroductionId");

                    b.HasOne("Project_mobile_app.Models.Stop", "PositionOfStop")
                        .WithOne("Position")
                        .HasForeignKey("Project_mobile_app.Models.MapPosition", "PositionOfStopId");

                    b.HasOne("Project_mobile_app.Models.Stop", "StopDisplayAfterDisplay")
                        .WithMany("PositionsDisplayAfterDisplay")
                        .HasForeignKey("StopDisplayAfterDisplayId");

                    b.HasOne("Project_mobile_app.Models.Stop", "StopDisplayAfterUnlock")
                        .WithMany("PositionsDisplayAfterUnlock")
                        .HasForeignKey("StopDisplayAfterUnlockId");

                    b.Navigation("Introduction");

                    b.Navigation("PositionOfStop");

                    b.Navigation("StopDisplayAfterDisplay");

                    b.Navigation("StopDisplayAfterUnlock");
                });

            modelBuilder.Entity("Project_mobile_app.Models.PasswordGameRequirement", b =>
                {
                    b.HasOne("Project_mobile_app.Models.Stop", "Stop")
                        .WithMany("Passwords")
                        .HasForeignKey("StopId");

                    b.Navigation("Stop");
                });

            modelBuilder.Entity("Project_mobile_app.Models.Statistics", b =>
                {
                    b.HasOne("Project_mobile_app.Models.User", "User")
                        .WithOne("Statistics")
                        .HasForeignKey("Project_mobile_app.Models.Statistics", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Project_mobile_app.Models.Stop", b =>
                {
                    b.HasOne("Project_mobile_app.Models.Game", "FirstStopOfGame")
                        .WithOne("FirstStop")
                        .HasForeignKey("Project_mobile_app.Models.Stop", "GameFirstStopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_mobile_app.Models.Game", "PartOfGame")
                        .WithMany("Stops")
                        .HasForeignKey("PartOfGameId");

                    b.Navigation("FirstStopOfGame");

                    b.Navigation("PartOfGame");
                });

            modelBuilder.Entity("QuestionStop", b =>
                {
                    b.HasOne("Project_mobile_app.Models.Question", null)
                        .WithMany()
                        .HasForeignKey("QuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_mobile_app.Models.Stop", null)
                        .WithMany()
                        .HasForeignKey("StopsThatOpenThisId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StopStop", b =>
                {
                    b.HasOne("Project_mobile_app.Models.Stop", null)
                        .WithMany()
                        .HasForeignKey("OpensId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project_mobile_app.Models.Stop", null)
                        .WithMany()
                        .HasForeignKey("StopsThatOpenThisId")
                        .OnDelete(DeleteBehavior.ClientCascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project_mobile_app.Models.ChoiceForChoiceQuestion", b =>
                {
                    b.HasOne("Project_mobile_app.Models.ChoiceQuestion", "Question")
                        .WithMany("Choices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Project_mobile_app.Models.ChoiceForTextQuestion", b =>
                {
                    b.HasOne("Project_mobile_app.Models.TextQuestion", "Question")
                        .WithMany("Choices")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Project_mobile_app.Models.DefaultChoice", b =>
                {
                    b.HasOne("Project_mobile_app.Models.TextQuestion", "Question")
                        .WithOne("DefaultChoice")
                        .HasForeignKey("Project_mobile_app.Models.DefaultChoice", "QuestionId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("Project_mobile_app.Models.DisplayObject", b =>
                {
                    b.Navigation("HintForTheseStops");

                    b.Navigation("RewardForTheseStops");
                });

            modelBuilder.Entity("Project_mobile_app.Models.Game", b =>
                {
                    b.Navigation("FirstStop");

                    b.Navigation("Introduction");

                    b.Navigation("Stops");
                });

            modelBuilder.Entity("Project_mobile_app.Models.Introduction", b =>
                {
                    b.Navigation("DisplayObjects");

                    b.Navigation("MapPositions");
                });

            modelBuilder.Entity("Project_mobile_app.Models.PasswordGameRequirement", b =>
                {
                    b.Navigation("Passwords");
                });

            modelBuilder.Entity("Project_mobile_app.Models.Stop", b =>
                {
                    b.Navigation("DisplayObjectsHints");

                    b.Navigation("DisplayObjectsRewards");

                    b.Navigation("Passwords");

                    b.Navigation("Position");

                    b.Navigation("PositionsDisplayAfterDisplay");

                    b.Navigation("PositionsDisplayAfterUnlock");
                });

            modelBuilder.Entity("Project_mobile_app.Models.User", b =>
                {
                    b.Navigation("Statistics");
                });

            modelBuilder.Entity("Project_mobile_app.Models.ChoiceQuestion", b =>
                {
                    b.Navigation("Choices");
                });

            modelBuilder.Entity("Project_mobile_app.Models.TextQuestion", b =>
                {
                    b.Navigation("DefaultChoice");

                    b.Navigation("Choices");
                });
#pragma warning restore 612, 618
        }
    }
}
